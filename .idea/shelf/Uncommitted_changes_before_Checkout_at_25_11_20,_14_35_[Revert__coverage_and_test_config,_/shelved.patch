Index: tsconfig.production.json
===================================================================
--- tsconfig.production.json	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ tsconfig.production.json	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
@@ -1,11 +0,0 @@
-{
-  "extends": "./tsconfig.json",
-  "exclude": [
-    "src/**/*.test.*",
-    "**/*.spec.*",
-    "**/__test__/*",
-    "**/__mocks__/*",
-    "**/__mockData__/",
-    "src/test"
-  ]
-}
Index: tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"compilerOptions\": {\n        /* Basic Options */\n        // \"incremental\": true,                   /* Enable incremental compilation */\n        \"target\": \"es5\"                           /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,\n        \"module\": \"commonjs\"                      /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n        // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n        // \"checkJs\": true,                       /* Report errors in .js files. */\n        // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n        // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n        // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n        // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n        \"outDir\": \"./dist\"                        /* Redirect output structure to the directory. */,\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n        // \"composite\": true,                     /* Enable project compilation */\n        // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\n        // \"removeComments\": true,                /* Do not emit comments to output. */\n        // \"noEmit\": true,                        /* Do not emit outputs. */\n        // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n        // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n\n        /* Strict Type-Checking Options */\n        \"strict\": true                            /* Enable all strict type-checking options. */,\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n\n        /* Additional Checks */\n        \"noUnusedLocals\": true /* Report errors on unused locals. */,\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n        \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n\n        /* Module Resolution Options */\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n        \"baseUrl\": \"./src\" /* Base directory to resolve non-absolute module names. */,\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n        \"esModuleInterop\": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n\n        /* Source Map Options */\n        // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n\n        /* Experimental Options */\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n        // ADDED LATER\n        \"pretty\": true,\n        \"resolveJsonModule\": true\n    },\n    //  \"include\": [\"src/**/*.*\"],\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tsconfig.json	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ tsconfig.json	(date 1606300323451)
@@ -66,5 +66,11 @@
     //  "include": ["src/**/*.*"],
     "exclude": [
         "node_modules"
+//        "src/**/*.test.*",
+//        "**/*.spec.*",
+//        "**/__test__/*",
+//        "**/__mocks__/*",
+//        "**/__mockData__/",
+//        "src/test"
     ]
 }
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"name\": \"dav-express-template\",\n    \"version\": \"1.0.0\",\n    \"description\": \"a fully packaged template for node/express/ts/jest\",\n    \"repository\": {\n        \"url\": \"\"\n    },\n    \"scripts\": {\n        \"clean\": \"rm -rf ./dist && mkdir dist\",\n        \"build\": \"npm run clean && tsc --project tsconfig.production.json\",\n        \"start\": \"npm run build && NODE_PATH=./dist node ./src/bin/www\",\n        \"dev\": \"NODE_ENV=development NODE_PATH=./src ts-node-dev --poll --files --inspect -- ./src/bin/www\",\n        \"test:ci\": \"jest --detectOpenHandles\",\n        \"test\": \"jest --watch --no-cache\",\n        \"prettier\": \"prettier 'src' --write --ignore-unknown\",\n        \"lint:ts\": \"eslint 'src/**/*.{ts,json}'\",\n        \"lint:js\": \"eslint 'src/**/*.{js}'\",\n        \"lint\": \"npm run lint:ts\",\n        \"test:unit\": \"jest \\\\.spec\\\\.ts?$\",\n        \"test:comp\": \"jest \\\\.test\\\\.ts?$\",\n        \"test:watch\": \"jest --watch --notify\",\n        \"test:cover\": \"node ./tools/test-cover.js\",\n        \"db:migrate\": \"./node_modules/.bin/sequelize db:migrate\",\n        \"db:undo\": \"./node_modules/.bin/sequelize db:migrate:undo\",\n        \"db:new\": \"./node_modules/.bin/sequelize migration:create\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        \"cookie-session\": \"^1.4.0\",\n        \"dotenv\": \"^8.2.0\",\n        \"express\": \"^4.17.1\",\n        \"express-async-errors\": \"^3.1.1\",\n        \"joi\": \"^17.3.0\",\n        \"jsonwebtoken\": \"^8.5.1\",\n        \"mongoose\": \"^5.10.15\",\n        \"mongoose-update-if-current\": \"^1.4.0\",\n        \"ts-node\": \"^9.0.0\",\n        \"ts-node-dev\": \"^1.0.0\",\n        \"typescript\": \"^4.0.5\"\n    },\n    \"devDependencies\": {\n        \"@types/cookie-session\": \"^2.0.41\",\n        \"@types/dotenv\": \"^8.2.0\",\n        \"@types/express\": \"^4.17.9\",\n        \"@types/jest\": \"^26.0.15\",\n        \"@types/joi\": \"^14.3.4\",\n        \"@types/jsonwebtoken\": \"^8.5.0\",\n        \"@types/mongoose\": \"^5.10.1\",\n        \"@types/node\": \"^14.14.9\",\n        \"@types/supertest\": \"^2.0.10\",\n        \"@typescript-eslint/eslint-plugin\": \"^4.8.1\",\n        \"@typescript-eslint/parser\": \"^4.8.1\",\n        \"eslint\": \"^7.3.1\",\n        \"eslint-config-prettier\": \"^6.11.0\",\n        \"eslint-plugin-import\": \"^2.22.0\",\n        \"eslint-plugin-json\": \"^2.1.1\",\n        \"eslint-plugin-prettier\": \"^3.1.4\",\n        \"eslint-plugin-security\": \"^1.4.0\",\n        \"husky\": \"^4.3.0\",\n        \"jest\": \"^26.6.3\",\n        \"lint-staged\": \"^10.5.1\",\n        \"mongodb-memory-server\": \"^6.9.2\",\n        \"node-mocks-http\": \"^1.9.0\",\n        \"prettier\": \"^2.2.0\",\n        \"supertest\": \"^5.0.0\",\n        \"ts-jest\": \"^26.4.4\"\n    },\n    \"husky\": {\n        \"hooks\": {\n            \"pre-commit\": \"lint-staged\",\n            \"pre-push\": \"npm run test:ci\"\n        }\n    },\n    \"lint-staged\": {\n        \"*.js\": \"eslint --cache --fix\",\n        \"*.ts\": [\n            \"eslint --fix\"\n        ]\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ package.json	(date 1606300323449)
@@ -7,10 +7,10 @@
     },
     "scripts": {
         "clean": "rm -rf ./dist && mkdir dist",
-        "build": "npm run clean && tsc --project tsconfig.production.json",
+        "build": "npm run clean && tsc",
         "start": "npm run build && NODE_PATH=./dist node ./src/bin/www",
         "dev": "NODE_ENV=development NODE_PATH=./src ts-node-dev --poll --files --inspect -- ./src/bin/www",
-        "test:ci": "jest --detectOpenHandles",
+        "test:ci": "jest",
         "test": "jest --watch --no-cache",
         "prettier": "prettier 'src' --write --ignore-unknown",
         "lint:ts": "eslint 'src/**/*.{ts,json}'",
Index: src/routes/api/users/__test__/users.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import request from 'supertest';\nimport { app } from 'app';\n\ndescribe('User Sign-In', () => {\n    it('returns 200 and set cookie after successful sign in', async () => {\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(201);\n        const response = await request(app)\n            .post('/api/users/sign-in')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(200);\n\n        expect(response.get('Set-Cookie')).toBeDefined();\n    });\n\n    it('returns 400 if missing email or password', async () => {\n        await request(app)\n            .post('/api/users/sign-in')\n            .send({\n                email: '',\n                password: 'aaaaaa',\n            })\n            .expect(400);\n        await request(app)\n            .post('/api/users/sign-in')\n            .send({\n                email: 'a@a.com',\n                password: '',\n            })\n            .expect(400);\n    });\n\n    it('returns 400 when sign in without sign up', async () => {\n        return request(app)\n            .post('/api/users/sign-in')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(400);\n    });\n\n    it('returns 400 when sign in with wrong password', async () => {\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa1',\n            })\n            .expect(201);\n        return request(app)\n            .post('/api/users/sign-in')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa2',\n            })\n            .expect(400);\n    });\n});\n\ndescribe('User Sign-up', () => {\n    it('returns a 201 on successful sign up', async () => {\n        return request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(201);\n    });\n\n    it('returns a 400 with an invalid email', async () => {\n        return request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'invalidEmail',\n                password: 'aaaaaa',\n            })\n            .expect(400);\n    });\n\n    it('returns a 400 with an invalid password', async () => {\n        return request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'a',\n            })\n            .expect(400);\n    });\n\n    it('returns a 400 when missing email or password', async () => {\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n            })\n            .expect(400);\n\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                password: 'aaaaaa',\n            })\n            .expect(400);\n    });\n\n    it('returns a 400 when use existing email to sign-up', async () => {\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(201);\n\n        await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(400);\n    });\n\n    it('sets a cookie after a successful sign-up', async () => {\n        const response = await request(app)\n            .post('/api/users/sign-up')\n            .send({\n                email: 'a@a.com',\n                password: 'aaaaaa',\n            })\n            .expect(201);\n\n        expect(response.get('Set-Cookie')).toBeDefined();\n    });\n});\n\ndescribe('Current user route', () => {\n    it(\"returns current user's details\", async () => {\n        const email = 'some-email@example.com';\n        const user = global.signUpAndCookie(email);\n\n        let response = await request(app)\n            .get('/api/users/me')\n            .set('Cookie', user.cookies)\n            .send()\n            .expect(200);\n\n        expect(response.body.data.currentUser.email).toEqual(email);\n    });\n\n    it(\"returns current user's details\", async () => {\n        let response = await request(app).get('/api/users/me').send().expect(200);\n        expect(response.body.data.currentUser).toBeNull();\n    });\n});\n\ndescribe('User sign-out route', () => {\n    it('returns 200 and invalidate the cookie after successful sign out', async () => {\n        await request(app).post('/api/users/sign-up').send({\n            email: 'a@a.com',\n            password: 'aaaaaa',\n        });\n\n        const response = await request(app).post('/api/users/sign-out').expect(200);\n\n        expect(response.get('Set-Cookie')[0]).toEqual(\n            'express:sess=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; httponly',\n        );\n    });\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/routes/api/users/__test__/users.test.ts	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ src/routes/api/users/__test__/users.test.ts	(date 1606300323450)
@@ -47,23 +47,6 @@
             })
             .expect(400);
     });
-
-    it('returns 400 when sign in with wrong password', async () => {
-        await request(app)
-            .post('/api/users/sign-up')
-            .send({
-                email: 'a@a.com',
-                password: 'aaaaaa1',
-            })
-            .expect(201);
-        return request(app)
-            .post('/api/users/sign-in')
-            .send({
-                email: 'a@a.com',
-                password: 'aaaaaa2',
-            })
-            .expect(400);
-    });
 });
 
 describe('User Sign-up', () => {
Index: src/routes/api/users/users.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Router } from 'express';\nimport { userController } from 'controllers';\nimport { validateRequest } from 'middlewares';\nimport { usersInputSchema } from 'config/validations';\n\nconst router = Router();\n\nrouter.get('/me', userController.currentUser);\nrouter.post('/sign-in', validateRequest(usersInputSchema.signIn), userController.signIn);\nrouter.post('/sign-up', validateRequest(usersInputSchema.signUp), userController.signUp);\nrouter.post('/sign-out', userController.signOut);\n\nexport { router };\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/routes/api/users/users.ts	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ src/routes/api/users/users.ts	(date 1606300323451)
@@ -6,6 +6,7 @@
 const router = Router();
 
 router.get('/me', userController.currentUser);
+
 router.post('/sign-in', validateRequest(usersInputSchema.signIn), userController.signIn);
 router.post('/sign-up', validateRequest(usersInputSchema.signUp), userController.signUp);
 router.post('/sign-out', userController.signOut);
