Index: .env.test
===================================================================
--- .env.test	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ .env.test	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
@@ -1,3 +0,0 @@
-JWT_SECRET=VeRysEcreTInformaTIOn
-BASE_API_URL=api
-MONGO_URI=mongodb+srv://davit:vardanyan@cluster0.zd3fq.mongodb.net/dav-express?retryWrites=true&w=majority
Index: src/bin/www
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const dotenv = require('dotenv')\n\nconst result = dotenv.config({ path: './.env.local'})\n\nif (result.error) {\n\tconsole.log(result);\n\tprocess.exit()\n}\n\nconst mongoose = require('mongoose');\nconst http = require('http');\n\nconst { app } = require('app');\n\nconst server = http.createServer(app);\n\n/*\n * if you do logging middleware, and use docker,\n * search for \"node logging on docker\" and \"winston.transports.Console\"\n * https://github.com/winstonjs/winston/blob/master/docs/transports.md#console-transport\n * The idea is make winston to record logs in docker logs, otherwise logs on node would be removed\n * when you restart the container, and docker logs will always be empty\n * */\n\nconst port = 5000;\n\n(async function () {\n\ttry {\n\t\t// Connect to DB\n\t\tawait mongoose.connect(process.env.MONGO_URI, {\n\t\t    useNewUrlParser: true,\n\t\t    useCreateIndex: true,\n\t\t    useUnifiedTopology: true,\n\t\t})\n\t\tconsole.log('[Node Process] Ticket mongodb is connected...')\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\tprocess.exit();\n\t}\n\n\t// Run the server\n\tserver.listen(port, () => {\n\t\tconsole.log(`[Node Process] Server is up on ${port}, env: ${process.env.NODE_ENV}`);\n\n\t\tif (process.env.NODE_ENV !== 'development') {\n\t\t\t// quit on ctrl-c when running docker in terminal\n\t\t\tprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\n\t\t\t// quit properly on docker stop\n\t\t\tprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n\t\t}\n\t});\n})();\n\n/**\n * @description You need this code so node will watch for exit signals\n * node by default doesn't handle SIGINT/SIGTERM\n * docker containers use SIGINT and SIGTERM to properly exit\n * https://github.com/npm/npm/issues/4603\n * https://github.com/npm/npm/pull/10868\n * https://github.com/RisingStack/kubernetes-graceful-shutdown-example/blob/master/src/index.js\n * if you want to use npm then start with `docker run --init` to help, but I still don't think it's\n * a graceful shutdown of node process, just a forced exit\n */\n\n// shut down server\nfunction gracefulShutdown(signal) {\n\tconsole.info(\n\t\t`[Node Process]: ${new Date().toISOString()}, signal: ${signal}, port: ${port}, pid: ${\n\t\t\tprocess.pid\n\t\t}`,\n\t);\n\t// waitForSocketsToClose(10)\n\n\t// NOTE: server.close is for express based apps\n\t// If using hapi, use `server.stop`\n\tserver.close(function onServerClosed(err) {\n\t\tif (err) {\n\t\t\tconsole.error(err);\n\t\t\tprocess.exitCode = 1;\n\t\t}\n\t\tprocess.exit();\n\t});\n}\n\n// For sockets\n// let sockets = {} as any,\n//     nextSocketId = 0\n//\n// server.on('connection', function (socket) {\n//     const socketId = nextSocketId++\n//     sockets[socketId] = socket\n//\n//     socket.once('close', function () {\n//         delete sockets[socketId]\n//     })\n// })\n//\n// function waitForSocketsToClose(counter: number) {\n//     if (counter > 0) {\n//         console.log(\n//             `Waiting ${counter} more ${\n//                 counter !== 1 ? 'seconds' : 'second'\n//             } for all connections to close...`,\n//         )\n//         return setTimeout(waitForSocketsToClose, 1000, counter - 1)\n//     }\n//\n//     console.log('Forcing all connections to close now')\n//     for (let socketId in sockets) {\n//         sockets[socketId].destroy()\n//     }\n// }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/bin/www	(revision 5097056d8ac7c0b4402d0d7d5b6384c50f20a69e)
+++ src/bin/www	(date 1606300408180)
@@ -1,12 +1,4 @@
-const dotenv = require('dotenv')
-
-const result = dotenv.config({ path: './.env.local'})
-
-if (result.error) {
-	console.log(result);
-	process.exit()
-}
-
+require('dotenv').config({ path: '.env.local'})
 const mongoose = require('mongoose');
 const http = require('http');
 
